openapi: 3.0.3
info:
  title: Kotal API
  description: Kotal API used by Kotal dashboard and SDKs to create and manage Blockchain infrastructure
  version: "v1.0"
  contact:
    name: Mostafa Farghaly
    email: mostafa@kotal.co
servers:
  - url: http://localhost:3000/v1/
    description: Localhost
paths:
  /ethereum/nodes:
    post:
      tags:
        - Ethereum
      summary: Create Ethereum node
      operationId: createEthereumNode
      description: create a new Ethereum node from the given node spec
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EthereumNode"
      responses:
        201:
          description: node has been created
          content:
            application/json:
              schema:
                type: object
                properties:
                  node:
                    type: object
                    $ref: "#/components/schemas/EthereumNode"
    get:
      tags:
        - Ethereum
      summary: List all Etherem nodes
      operationId: listEthereumNode
      description: List all Ethereum nodes
      responses:
        200:
          description: all Ethereum nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodes:
                    type: array
                    items:
                      $ref: "#/components/schemas/EthereumNode"

  /ethereum/nodes/{nodeName}:
    get:
      tags:
        - Ethereum
      summary: Get Etherem node by name
      operationId: getEthereumNode
      description: get Ethereum node by a given name
      parameters:
        - name: nodeName
          description: Node name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Node by the given name
          content:
            application/json:
              schema:
                type: object
                properties:
                  node:
                    $ref: "#/components/schemas/EthereumNode"
        400:
          description: path parameter {nodeName} is missing
        404:
          description: Node by name {nodeName} is not found
    delete:
      tags:
        - Ethereum
      summary: Delete Etherem node by name
      operationId: deleteEthereumNode
      description: Delete Ethereum node by a given name
      parameters:
        - name: nodeName
          description: Node name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Node by name has been deleted
        400:
          description: path parameter {nodeName} is missing
        404:
          description: Node by name {nodeName} is not found
    put:
      tags:
        - Ethereum
      summary: Update Etherem node by name
      operationId: updateEthereumNode
      description: Update Ethereum node mutable fields by a given name
      parameters:
        - name: nodeName
          description: Node name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MutableEthereumNode"
      responses:
        200:
          description: Node has been updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  node:
                    $ref: "#/components/schemas/EthereumNode"
        400:
          description: path parameter {nodeName} is missing
        404:
          description: Node by name {nodeName} is not found

  /ipfs/peers:
    post:
      tags:
        - IPFS
      summary: Create IPFS peer
      operationId: createIPFSPeer
      description: create IPFS peer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IPFSPeer"
      responses:
        201:
          description: peer has been created
          content:
            application/json:
              schema:
                type: object
                properties:
                  peer:
                    type: object
                    $ref: "#/components/schemas/IPFSPeer"

    get:
      tags:
        - IPFS
      summary: List all IPFS peers
      operationId: listIPFSPeers
      description: list all IPFS peers
      responses:
        200:
          description: all IPFS peers
          content:
            application/json:
              schema:
                type: object
                properties:
                  peers:
                    type: array
                    items:
                      $ref: "#/components/schemas/IPFSPeer"

  /ipfs/peers/{peerName}:
    get:
      tags:
        - IPFS
      summary: Get IPFS peer by name
      operationId: getIPFSPeer
      description: get IPFS peer by name
      parameters:
        - name: peerName
          description: peer name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: IPFS peer by the given name
          content:
            application/json:
              schema:
                type: object
                properties:
                  peer:
                    $ref: "#/components/schemas/IPFSPeer"
        400:
          description: path parameter {peerName} is missing
        404:
          description: Node by name {peerName} is not found

    delete:
      tags:
        - IPFS
      summary: Delete IPFS peer by name
      operationId: deleteIPFSPeer
      description: Delete IPFS peer by a given name
      parameters:
        - name: peerName
          description: peer name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Peer by name has been deleted
        400:
          description: path parameter {peerName} is missing
        404:
          description: Peer by name {peerName} is not found

    put:
      tags:
        - IPFS
      summary: Update IPFS peer by name
      operationId: updateIPFSPeer
      description: Update IPFS peer mutable fields by a given name
      parameters:
        - name: peerName
          description: Peer name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MutableIPFSPeer"
      responses:
        200:
          description: Peer has been updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  peer:
                    $ref: "#/components/schemas/IPFSPeer"
        400:
          description: path parameter {peerName} is missing
        404:
          description: Peer by name {peerName} is not found

  /ethereum2/beaconnodes:
    post:
      tags:
        - Ethereum 2.0
      summary: Create beacon node
      operationId: createEthereum2BeaconNode
      description: create a new Ethereum 2.0 beacon node from the given beacon node spec
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ethereum2BeaconNode"
      responses:
        201:
          description: beacon node has been created
          content:
            application/json:
              schema:
                type: object
                properties:
                  node:
                    type: object
                    $ref: "#/components/schemas/Ethereum2BeaconNode"

    get:
      tags:
        - Ethereum 2.0
      summary: List all beacon nodes
      operationId: listEthereum2BeaconNodes
      description: List all Ethereum 2.0 beacon nodes
      responses:
        200:
          description: all Ethereum 2.0 beacon nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  beaconnodes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Ethereum2BeaconNode"
tags:
  - name: Ethereum
  - name: Ethereum 2.0
  - name: Filecoin
  - name: IPFS

components:
  schemas:
    EthereumNode:
      description: Ethereum 1 Node
      type: object
      required:
        - name
        - network
      properties:
        name:
          type: string
          example: my-node
          description: Ethereum node name
        network:
          type: string
          example: rinkeby
          description: Ethereum network to join
        client:
          description: Ethereum 1 client
          type: string
          default: besu
          example: geth
          enum:
            - besu
            - geth
            - parity
            - nethermind

    MutableEthereumNode:
      description: Mutable Ethereum 1 Node fields
      type: object
      properties:
        client:
          description: Ethereum client
          type: string
          default: besu
          example: geth
          enum:
            - besu
            - geth
            - parity
            - nethermind

    IPFSPeer:
      description: IPFS peer
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: my-peer
          description: IPFS peer name
        apiPort:
          type: number
          example: 3000
          default: 5001
          description: API server port
        apiHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: API server host
        gatewayPort:
          type: number
          example: 5000
          default: 8080
          description: local IPFS gateway server port
        gatewayHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: API server host
        routing:
          $ref: "#/components/schemas/IPFSRouting"
        profiles:
          type: array
          description: configuration profiles
          items:
            $ref: "#/components/schemas/IPFSConfigurationProfile"
        initProfiles:
          type: array
          description: inital configuration profiles
          default:
            - default-datastore
          items:
            $ref: "#/components/schemas/IPFSConfigurationProfile"

    MutableIPFSPeer:
      description: Mutable IPFS peer fields
      type: object
      properties:
        apiPort:
          type: number
          example: 3000
          default: 5001
          description: API server port
        apiHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: API server host
        gatewayPort:
          type: number
          example: 5000
          default: 8080
          description: local IPFS gateway server port
        gatewayHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: API server host
        routing:
          $ref: "#/components/schemas/IPFSRouting"
        profiles:
          type: array
          description: configuration profiles
          items:
            $ref: "#/components/schemas/IPFSConfigurationProfile"

    IPFSRouting:
      type: string
      example: "dhtclient"
      default: "dht"
      description: Content routing mechanism
      enum:
        - none
        - dht
        - dhtclient
        - dhtserver

    IPFSConfigurationProfile:
      type: string
      description: IPFS configuration profile
      enum:
        - server
        - randomports
        - default-datastore
        - local-discovery
        - test
        - default-networking
        - flatfs
        - badgerds
        - lowpower

    Ethereum2BeaconNode:
      description: Ethereum 2.0 beacon node
      type: object
      required:
        - name
        - network
        - client
      properties:
        name:
          type: string
          example: "my-beacon"
          description: Beacon node name
        network:
          type: string
          example: "mainnet"
          description: Beacon chain network name
        client:
          type: string
          example: "prysm"
          default: "teku"
          enum:
            - "teku"
            - "prysm"
            - "lighthouse"
            - "nimbus"
          description: Beacon node client
        eth1Endpoints:
          type: array
          description: Ethereum node JSON-RPC endpoints
          items:
            type: string
            description: Ethereum JSON-RPC endpoint
          example:
            - "my-ethereum-node:8545"
        rest:
          type: boolean
          example: true
          default: false
          description: Enable REST API server
        restPort:
          type: number
          example: 5555
          default: 5051
          description: REST API server port
        restHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: REST API server host
        rpc:
          type: boolean
          example: true
          default: false
          description: Enable JSON-RPC server
        rpcPort:
          type: number
          example: 4444
          default: 4000
          description: JSON-RPC server port
        rpcHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: JSON-RPC server host
        grpc:
          type: boolean
          example: true
          default: false
          description: Enable GRPC gateway server
        grpcPort:
          type: number
          example: 3555
          default: 3500
          description: GRPC gateway server port
        grpcHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: GRPC gateway server host
        cpu:
          type: string
          example: "2"
          default: "4"
          description: Number of CPU core required
        cpuLimit:
          type: string
          example: "4"
          default: "8"
          description: Max number of CPU cores
        memory:
          type: string
          example: "4Gi"
          default: "8Gi"
          description: Memory required
        memoryLimit:
          type: string
          example: "8Gi"
          default: "16Gi"
          description: Max memory
        storage:
          type: string
          example: "1Ti"
          default: "200Gi"
          description: Disk space required
