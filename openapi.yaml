openapi: 3.0.3
info:
  title: Kotal API
  description: Kotal API used by Kotal dashboard and SDKs to create and manage Blockchain infrastructure
  version: "v1.0"
  contact:
    name: Mostafa Farghaly
    email: mostafa@kotal.co
servers:
  - url: http://localhost:3000/v1/
    description: Localhost
paths:
  /ethereum/nodes:
    post:
      tags:
        - Ethereum
      summary: Create Ethereum node
      operationId: createEthereumNode
      description: create a new Ethereum node from the given node spec
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEthereumNode"
      responses:
        201:
          description: node has been created
          content:
            application/json:
              schema:
                type: object
                properties:
                  node:
                    type: object
                    $ref: "#/components/schemas/EthereumNode"
    get:
      tags:
        - Ethereum
      summary: List all Etherem nodes
      operationId: listEthereumNode
      description: List all Ethereum nodes
      responses:
        200:
          description: all Ethereum nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodes:
                    type: array
                    items:
                      $ref: "#/components/schemas/EthereumNode"
    head:
      tags:
        - Ethereum
      summary: Get number of nodes
      operationId: countEthereumNodes
      description: count ethereum nodes
      responses:
        200:
          description: ethereum nodes count
          headers:
            X-Total-Count:
              description: number of ethereum nodes
              schema:
                type: number

  /ethereum/nodes/{nodeName}:
    get:
      tags:
        - Ethereum
      summary: Get Etherem node by name
      operationId: getEthereumNode
      description: get Ethereum node by a given name
      parameters:
        - name: nodeName
          description: Node name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Node by the given name
          content:
            application/json:
              schema:
                type: object
                properties:
                  node:
                    $ref: "#/components/schemas/EthereumNode"
        400:
          description: path parameter {nodeName} is missing
        404:
          description: Node by name {nodeName} is not found
    delete:
      tags:
        - Ethereum
      summary: Delete Etherem node by name
      operationId: deleteEthereumNode
      description: Delete Ethereum node by a given name
      parameters:
        - name: nodeName
          description: Node name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Node by name has been deleted
        400:
          description: path parameter {nodeName} is missing
        404:
          description: Node by name {nodeName} is not found
    put:
      tags:
        - Ethereum
      summary: Update Etherem node by name
      operationId: updateEthereumNode
      description: Update Ethereum node mutable fields by a given name
      parameters:
        - name: nodeName
          description: Node name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEthereumNode"
      responses:
        200:
          description: Node has been updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  node:
                    $ref: "#/components/schemas/EthereumNode"
        400:
          description: path parameter {nodeName} is missing
        404:
          description: Node by name {nodeName} is not found

  /ipfs/peers:
    post:
      tags:
        - IPFS
      summary: Create IPFS peer
      operationId: createIPFSPeer
      description: create IPFS peer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIPFSPeer"
      responses:
        201:
          description: peer has been created
          content:
            application/json:
              schema:
                type: object
                properties:
                  peer:
                    type: object
                    $ref: "#/components/schemas/IPFSPeer"

    get:
      tags:
        - IPFS
      summary: List all IPFS peers
      operationId: listIPFSPeers
      description: list all IPFS peers
      responses:
        200:
          description: all IPFS peers
          content:
            application/json:
              schema:
                type: object
                properties:
                  peers:
                    type: array
                    items:
                      $ref: "#/components/schemas/IPFSPeer"

    head:
      tags:
        - IPFS
      summary: Get number of IPFS peers
      operationId: countIPFSPeers
      description: count IPFS peers
      responses:
        200:
          description: IPFS peers count
          headers:
            X-Total-Count:
              description: number of IPFS peers
              schema:
                type: number

  /ipfs/peers/{peerName}:
    get:
      tags:
        - IPFS
      summary: Get IPFS peer by name
      operationId: getIPFSPeer
      description: get IPFS peer by name
      parameters:
        - name: peerName
          description: peer name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: IPFS peer by the given name
          content:
            application/json:
              schema:
                type: object
                properties:
                  peer:
                    $ref: "#/components/schemas/IPFSPeer"
        400:
          description: path parameter {peerName} is missing
        404:
          description: Node by name {peerName} is not found

    delete:
      tags:
        - IPFS
      summary: Delete IPFS peer by name
      operationId: deleteIPFSPeer
      description: Delete IPFS peer by a given name
      parameters:
        - name: peerName
          description: peer name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Peer by name has been deleted
        400:
          description: path parameter {peerName} is missing
        404:
          description: Peer by name {peerName} is not found

    put:
      tags:
        - IPFS
      summary: Update IPFS peer by name
      operationId: updateIPFSPeer
      description: Update IPFS peer mutable fields by a given name
      parameters:
        - name: peerName
          description: Peer name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIPFSPeer"
      responses:
        200:
          description: Peer has been updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  peer:
                    $ref: "#/components/schemas/IPFSPeer"
        400:
          description: path parameter {peerName} is missing
        404:
          description: Peer by name {peerName} is not found

  /filecoin/nodes:
    post:
      tags:
        - Filecoin
      summary: Create Filecoin node
      operationId: createFilecoinNode
      description: create Filecoin node
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFilecoinNode"
      responses:
        201:
          description: node has been created
          content:
            application/json:
              schema:
                type: object
                properties:
                  node:
                    type: object
                    $ref: "#/components/schemas/FilecoinNode"

    get:
      tags:
        - Filecoin
      summary: List all Filecoin nodes
      operationId: listFilecoinNodes
      description: list all Filecoin nodes
      responses:
        200:
          description: all Filecoin nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodes:
                    type: array
                    items:
                      $ref: "#/components/schemas/FilecoinNode"

    head:
      tags:
        - Filecoin
      summary: Get number of Filecoin nodes
      operationId: countFilecoinNodes
      description: count Filecoin nodes
      responses:
        200:
          description: Filecoin nodes count
          headers:
            X-Total-Count:
              description: number of Filecoin nodes
              schema:
                type: number

  /filecoin/nodes/{nodeName}:
    get:
      tags:
        - Filecoin
      summary: Get Filecoin node by name
      operationId: getFilecoinNode
      description: get Filecoin node by name
      parameters:
        - name: nodeName
          description: node name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Filecoin node by the given name
          content:
            application/json:
              schema:
                type: object
                properties:
                  node:
                    $ref: "#/components/schemas/FilecoinNode"
        400:
          description: path parameter {nodeName} is missing
        404:
          description: Node by name {nodeName} is not found

    delete:
      tags:
        - Filecoin
      summary: Delete Filecoin node by name
      operationId: deleteFilecoinNode
      description: Delete Filecoin node by a given name
      parameters:
        - name: nodeName
          description: node name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: node by name has been deleted
        400:
          description: path parameter {nodeName} is missing
        404:
          description: node by name {nodeName} is not found

    put:
      tags:
        - Filecoin
      summary: Update Filecoin node by name
      operationId: updateFilecoinNode
      description: Update Filecoin node mutable fields by a given name
      parameters:
        - name: nodeName
          description: node name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFilecoinNode"
      responses:
        200:
          description: node has been updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  node:
                    $ref: "#/components/schemas/FilecoinNode"
        400:
          description: path parameter {nodeName} is missing
        404:
          description: node by name {nodeName} is not found

  /chainlink/nodes:
    post:
      tags:
        - Chainlink
      summary: Create Chainlink node
      operationId: createChainlinkNode
      description: create Chainlink node
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateChainlinkNode"
      responses:
        201:
          description: node has been created
          content:
            application/json:
              schema:
                type: object
                properties:
                  node:
                    type: object
                    $ref: "#/components/schemas/ChainlinkNode"

    get:
      tags:
        - Chainlink
      summary: List all Chainlink nodes
      operationId: listChainlinkNodes
      description: list all Chainlink nodes
      responses:
        200:
          description: all Chainlink nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodes:
                    type: array
                    items:
                      $ref: "#/components/schemas/ChainlinkNode"

    head:
      tags:
        - Chainlink
      summary: Get number of Chainlink nodes
      operationId: countChainlinkNodes
      description: count Chainlink nodes
      responses:
        200:
          description: Chainlink nodes count
          headers:
            X-Total-Count:
              description: number of Chainlink nodes
              schema:
                type: number

  /chainlink/nodes/{nodeName}:
    get:
      tags:
        - Chainlink
      summary: Get Chainlink node by name
      operationId: getChainlinkNode
      description: get Chainlink node by name
      parameters:
        - name: nodeName
          description: node name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Chainlink node by the given name
          content:
            application/json:
              schema:
                type: object
                properties:
                  node:
                    $ref: "#/components/schemas/ChainlinkNode"
        400:
          description: path parameter {nodeName} is missing
        404:
          description: Node by name {nodeName} is not found

    delete:
      tags:
        - Chainlink
      summary: Delete Chainlink node by name
      operationId: deleteChainlinkNode
      description: Delete Chainlink node by a given name
      parameters:
        - name: nodeName
          description: chainlink node name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Node by name has been deleted
        400:
          description: path parameter {nodeName} is missing
        404:
          description: Node by name {nodeName} is not found

    put:
      tags:
        - Chainlink
      summary: Update Chainlink node by name
      operationId: updateChainlinkNode
      description: Update Chainlink node mutable fields by a given name
      parameters:
        - name: nodeName
          description: Peer name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateChainlinkNode"
      responses:
        200:
          description: Node has been updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  node:
                    $ref: "#/components/schemas/ChainlinkNode"
        400:
          description: path parameter {nodeName} is missing
        404:
          description: node by name {nodeName} is not found

  /ipfs/clusterpeers:
    post:
      tags:
        - IPFS
      summary: Create IPFS cluster peer
      operationId: createIPFSClusterPeer
      description: create IPFS cluster peer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIPFSClusterPeer"
      responses:
        201:
          description: cluster peer has been created
          content:
            application/json:
              schema:
                type: object
                properties:
                  clusterpeer:
                    type: object
                    $ref: "#/components/schemas/IPFSClusterPeer"

    get:
      tags:
        - IPFS
      summary: List all IPFS cluster peers
      operationId: listIPFSClusterPeers
      description: list all IPFS cluster peers
      responses:
        200:
          description: all IPFS cluster peers
          content:
            application/json:
              schema:
                type: object
                properties:
                  clusterpeers:
                    type: array
                    items:
                      $ref: "#/components/schemas/IPFSClusterPeer"

    head:
      tags:
        - IPFS
      summary: Count IPFS cluster Peers
      operationId: countIPFSClusterPeers
      description: count IPFS cluster peers
      responses:
        200:
          description: IPFS cluster peers count
          headers:
            X-Total-Count:
              description: number of IPFS cluster peers
              schema:
                type: number

  /ipfs/clusterpeers/{peerName}:
    get:
      tags:
        - IPFS
      summary: Get IPFS cluster peer by name
      operationId: getIPFSClusterPeer
      description: get IPFS cluster peer by name
      parameters:
        - name: peerName
          description: cluster peer name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: IPFS cluster peer by the given name
          content:
            application/json:
              schema:
                type: object
                properties:
                  clusterpeer:
                    $ref: "#/components/schemas/IPFSClusterPeer"
        404:
          description: cluster peer by name {peerName} is not found

    delete:
      tags:
        - IPFS
      summary: Delete IPFS cluster peer by name
      operationId: deleteIPFSClusterPeer
      description: Delete IPFS cluster peer by a given name
      parameters:
        - name: peerName
          description: cluster peer name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: cluster peer by name has been deleted
        404:
          description: cluster peer by name {peerName} is not found

    put:
      tags:
        - IPFS
      summary: Update IPFS cluster peer by name
      operationId: updateIPFSClusterPeer
      description: Update IPFS cluster peer mutable fields by a given name
      parameters:
        - name: peerName
          description: cluster peer name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIPFSClusterPeer"
      responses:
        200:
          description: cluster peer has been updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  clusterpeer:
                    $ref: "#/components/schemas/IPFSClusterPeer"
        404:
          description: cluster peer by name {peerName} is not found

  /ethereum2/beaconnodes:
    post:
      tags:
        - Ethereum 2.0
      summary: Create beacon node
      operationId: createEthereum2BeaconNode
      description: create a new Ethereum 2.0 beacon node from the given beacon node spec
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEthereum2BeaconNode"
      responses:
        201:
          description: beacon node has been created
          content:
            application/json:
              schema:
                type: object
                properties:
                  node:
                    type: object
                    $ref: "#/components/schemas/Ethereum2BeaconNode"

    get:
      tags:
        - Ethereum 2.0
      summary: List all beacon nodes
      operationId: listEthereum2BeaconNodes
      description: List all Ethereum 2.0 beacon nodes
      responses:
        200:
          description: all Ethereum 2.0 beacon nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  beaconnodes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Ethereum2BeaconNode"

    head:
      tags:
        - Ethereum 2.0
      summary: Count Ethereum 2.0 beacon nodes
      operationId: countEthereum2BeaconNodes
      description: count Ethereum 2.0 beacon nodes
      responses:
        200:
          description: Ethereum 2.0 beacon nodes count
          headers:
            X-Total-Count:
              description: number of Ethereum 2.0 beacon nodes
              schema:
                type: number

  /ethereum2/beaconnodes/{nodeName}:
    get:
      tags:
        - Ethereum 2.0
      summary: Get beacon node by name
      operationId: getEthereum2BeaconNode
      description: get Ethereum 2.0 beacon node by a given name
      parameters:
        - name: nodeName
          description: Beacon node name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Beacon node by the given name
          content:
            application/json:
              schema:
                type: object
                properties:
                  beaconnode:
                    $ref: "#/components/schemas/Ethereum2BeaconNode"
        404:
          description: Beacon node by name {nodeName} is not found
    delete:
      tags:
        - Ethereum 2.0
      summary: Delete beacon node by name
      operationId: deleteEthereum2BeaconNode
      description: Delete Ethereum 2.0 beacon node by a given name
      parameters:
        - name: nodeName
          description: Beacon node name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Beacon node by name has been deleted
        404:
          description: Beacon node by name {nodeName} is not found
    put:
      tags:
        - Ethereum 2.0
      summary: Update beacon node by name
      operationId: updateEthereum2BeaconNode
      description: Update Ethereum 2.0 beacon node mutable fields by a given name
      parameters:
        - name: nodeName
          description: Beacon node name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEthereum2BeaconNode"
      responses:
        200:
          description: Beacon node has been updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  beaconnode:
                    $ref: "#/components/schemas/Ethereum2BeaconNode"
        404:
          description: Beacon node by name {nodeName} is not found

  /ethereum2/validators:
    post:
      tags:
        - Ethereum 2.0
      summary: Create validator
      operationId: createEthereum2Validator
      description: create a new Ethereum 2.0 validator from the given validator spec
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEthereum2Validator"
      responses:
        201:
          description: validator has been created
          content:
            application/json:
              schema:
                type: object
                properties:
                  validator:
                    type: object
                    $ref: "#/components/schemas/Ethereum2Validator"

    get:
      tags:
        - Ethereum 2.0
      summary: List all validators
      operationId: listEthereum2Validators
      description: List all Ethereum 2.0 validators
      responses:
        200:
          description: all Ethereum 2.0 validators
          content:
            application/json:
              schema:
                type: object
                properties:
                  validators:
                    type: array
                    items:
                      $ref: "#/components/schemas/Ethereum2Validator"

    head:
      tags:
        - Ethereum 2.0
      summary: Count Ethereum 2.0 Validators
      operationId: countEthereum2Validators
      description: count Ethereum 2.0 validators
      responses:
        200:
          description: Ethereum 2.0 validators count
          headers:
            X-Total-Count:
              description: number of Ethereum 2.0 validators
              schema:
                type: number

  /ethereum2/validators/{validatorName}:
    get:
      tags:
        - Ethereum 2.0
      summary: Get validator client by name
      operationId: getEthereum2Validator
      description: get Ethereum 2.0 validator by a given name
      parameters:
        - name: validatorName
          description: validator name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: validator by the given name
          content:
            application/json:
              schema:
                type: object
                properties:
                  validator:
                    $ref: "#/components/schemas/Ethereum2Validator"
        404:
          description: validator by name {validatorName} is not found
    delete:
      tags:
        - Ethereum 2.0
      summary: Delete validator by name
      operationId: deleteEthereum2Validator
      description: Delete Ethereum 2.0 validator by a given name
      parameters:
        - name: validatorName
          description: validator name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: validator by name has been deleted
        404:
          description: validator by name {validatorName} is not found
    put:
      tags:
        - Ethereum 2.0
      summary: Update validator by name
      operationId: updateEthereum2Validator
      description: Update Ethereum 2.0 validator mutable fields by a given name
      parameters:
        - name: validatorName
          description: validator name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEthereum2Validator"
      responses:
        200:
          description: validator has been updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  validator:
                    $ref: "#/components/schemas/Ethereum2Validator"
        404:
          description: Validator by name {validatorName} is not found

  /core/secrets:
    post:
      tags:
        - Kubernetes
      summary: Create Secret
      operationId: CreateKubernetesSecret
      description: create kubernetes secret
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateKubernetesSecret"
      responses:
        201:
          description: secret has been created
          content:
            application/json:
              schema:
                type: object
                properties:
                  secret:
                    type: object
                    $ref: "#/components/schemas/KubernetesSecret"

    get:
      tags:
        - Kubernetes
      summary: List all Secrets
      operationId: ListKubernetesSecrets
      description: List all Kubernetes secrets
      parameters:
        - in: query
          name: type
          schema:
            type: string
            description: type of the secret
      responses:
        200:
          description: all Kubernetes secrets
          content:
            application/json:
              schema:
                type: object
                properties:
                  secrets:
                    type: array
                    items:
                      $ref: "#/components/schemas/KubernetesSecret"

    head:
      tags:
        - Kubernetes
      summary: Get number of Kubernetes Secrets
      operationId: countKubernetesSecrets
      description: count Kubernetes secrets
      responses:
        200:
          description: Kubernetes secrets count
          headers:
            X-Total-Count:
              description: number of Kubernetes secrets
              schema:
                type: number

  /core/secrets/{secretName}:
    get:
      tags:
        - Kubernetes
      summary: Get secret by name
      operationId: getKubernetesSecret
      description: get kubernetes secret by name
      parameters:
        - name: secretName
          description: secret name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: secret by the given name
          content:
            application/json:
              schema:
                type: object
                properties:
                  secret:
                    $ref: "#/components/schemas/KubernetesSecret"
        404:
          description: secret by name {secretName} is not found
    delete:
      tags:
        - Kubernetes
      summary: Delete secret by name
      operationId: deleteKubernetesSecret
      description: Delete Kubernetes secret by a given name
      parameters:
        - name: secretName
          description: secret name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: secret by name has been deleted
        404:
          description: secret by name {secretName} is not found

  /polkadot/nodes:
    post:
      tags:
        - Polkadot
      summary: Create Polkadot node
      operationId: createPolkadotNode
      description: create Polkadot node
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePolkadotNode"
      responses:
        201:
          description: node has been created
          content:
            application/json:
              schema:
                type: object
                properties:
                  node:
                    type: object
                    $ref: "#/components/schemas/PolkadotNode"

    get:
      tags:
        - Polkadot
      summary: List all Polkadot nodes
      operationId: listPolkadotNodes
      description: list all Polkadot nodes
      responses:
        200:
          description: all Polkadot nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodes:
                    type: array
                    items:
                      $ref: "#/components/schemas/PolkadotNode"

    head:
      tags:
        - Polkadot
      summary: Get number of Polkadot nodes
      operationId: countPolkadotNodes
      description: count Polkadot nodes
      responses:
        200:
          description: Polkadot nodes count
          headers:
            X-Total-Count:
              description: number of Polkadot nodes
              schema:
                type: number

  /polkadot/nodes/{nodeName}:
    get:
      tags:
        - Polkadot
      summary: Get Polkadot node by name
      operationId: getPolkadotNode
      description: get Polkadot node by name
      parameters:
        - name: nodeName
          description: node name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Polkadot node by the given name
          content:
            application/json:
              schema:
                type: object
                properties:
                  node:
                    $ref: "#/components/schemas/PolkadotNode"
        400:
          description: path parameter {nodeName} is missing
        404:
          description: Node by name {nodeName} is not found

    delete:
      tags:
        - Polkadot
      summary: Delete Polkadot node by name
      operationId: deletePolkadotNode
      description: Delete Polkadot node by a given name
      parameters:
        - name: nodeName
          description: node name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: node by name has been deleted
        400:
          description: path parameter {nodeName} is missing
        404:
          description: node by name {nodeName} is not found

    put:
      tags:
        - Polkadot
      summary: Update Polkadot node by name
      operationId: updatePolkadotNode
      description: Update Polkadot node mutable fields by a given name
      parameters:
        - name: nodeName
          description: node name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePolkadotNode"
      responses:
        200:
          description: node has been updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  node:
                    $ref: "#/components/schemas/PolkadotNode"
        400:
          description: path parameter {nodeName} is missing
        404:
          description: node by name {nodeName} is not found

tags:
  - name: Chainlink
  - name: Ethereum
  - name: Ethereum 2.0
  - name: Filecoin
  - name: IPFS
  - name: Kubernetes
  - name: Polkadot

components:
  schemas:
    ChainlinkAPICredentials:
      description: Chainlink API credentials
      type: object
      properties:
        email:
          description: Email address
          type: string
          example: mostafa@kotal.co
        passwordSecretName:
          description: Kubernetes secret name holding password
          type: string
          example: api-credentials-password

    ChainlinkNode:
      description: Chainlink Node
      type: object
      properties:
        name:
          type: string
          example: my-node
          description: Chainlink node name
        ethereumChainId:
          type: string
          example: 4
          description: Ethereum chain ID
        ethereumWsEndpoint:
          description: Ethereum node websocket endpoint
          type: string
          example: ws://my-eth-node:8546
        linkContractAddress:
          description: LINK contract address
          type: string
          example: "0x01BE23585060835E02B77ef475b0Cc51aA1e0709"
        databaseURL:
          description: Postgres database connection URL
          type: string
          example: postgres://username:password@server:port/database
        keystorePasswordSecretName:
          description: Kubernetes secret name holding keystore password
          type: string
          example: my-keystore-password
        apiCredentials:
          $ref: "#/components/schemas/ChainlinkAPICredentials"
        corsDomains:
          description: Domains to accept from which cross domain requests
          type: array
          default:
            - "*"
          example:
            - my.domain.com
            - your.domain.com
          items:
            description: Domain name
            type: string
        certSecretName:
          description: Kubernetes secret name holding tls certificate
          type: string
          example: my-certificate
        tlsPort:
          description: Port used for HTTPS connections
          type: number
          default: 6689
          example: 9999
        secureCookies:
          description: Enable secure cookies for authentication
          type: boolean
          default: false
          example: true
        logging:
          description: logging verbosity level
          type: string
          default: info
          example: debug
          enum:
            - debug
            - info
            - warn
            - error
            - panic
        ethereumHttpEndpoints:
          description: Ethereum node HTTP endpoints
          type: array
          items:
            description: Ethereum node HTTP endpoint
            type: string
          example:
            - http://my-eth-node:8545
            - http://my-eth-node2:8545
        cpu:
          type: string
          example: "1"
          default: "2"
          description: Number of CPU core required
        cpuLimit:
          type: string
          example: "2"
          default: "4"
          description: Max number of CPU cores
        memory:
          type: string
          example: "4Gi"
          default: "2Gi"
          description: Memory required
        memoryLimit:
          type: string
          example: "8Gi"
          default: "4Gi"
          description: Max memory
        storage:
          type: string
          example: "10Gi"
          default: "20Gi"
          description: Disk space required

    CreateChainlinkNode:
      description: Create Chainlink Node
      type: object
      required:
        - name
        - ethereumChainId
        - linkContractAddress
        - ethereumWsEndpoint
        - databaseURL
        - keystorePasswordSecretName
        - apiCredentials
      properties:
        name:
          type: string
          example: my-node
          description: Chainlink node name
        ethereumChainId:
          type: string
          example: 4
          description: Ethereum chain ID
        ethereumWsEndpoint:
          description: Ethereum node websocket endpoint
          type: string
          example: ws://my-eth-node:8546
        linkContractAddress:
          description: LINK contract address
          type: string
          example: "0x01BE23585060835E02B77ef475b0Cc51aA1e0709"
        databaseURL:
          description: Postgres database connection URL
          type: string
          example: postgres://username:password@server:port/database
        keystorePasswordSecretName:
          description: Kubernetes secret name holding keystore password
          type: string
          example: my-keystore-password
        apiCredentials:
          $ref: "#/components/schemas/ChainlinkAPICredentials"

    UpdateChainlinkNode:
      description: Update Chainlink Node
      type: object
      properties:
        ethereumWsEndpoint:
          description: Ethereum node websocket endpoint
          type: string
          example: ws://my-eth-node:8546
        databaseURL:
          description: Postgres database connection URL
          type: string
          example: postgres://username:password@server:port/database
        keystorePasswordSecretName:
          description: Kubernetes secret name holding keystore password
          type: string
          example: my-keystore-password
        apiCredentials:
          $ref: "#/components/schemas/ChainlinkAPICredentials"
        corsDomains:
          description: Domains to accept from which cross domain requests
          type: array
          default:
            - "*"
          example:
            - my.domain.com
            - your.domain.com
          items:
            description: Domain name
            type: string
        certSecretName:
          description: Kubernetes secret name holding tls certificate
          type: string
          example: my-certificate
        tlsPort:
          description: Port used for HTTPS connections
          type: number
          default: 6689
          example: 9999
        secureCookies:
          description: Enable secure cookies for authentication
          type: boolean
          default: false
          example: true
        logging:
          description: logging verbosity level
          type: string
          default: info
          example: debug
          enum:
            - debug
            - info
            - warn
            - error
            - panic
        ethereumHttpEndpoints:
          description: Ethereum node HTTP endpoints
          type: array
          items:
            description: Ethereum node HTTP endpoint
            type: string
          example:
            - http://my-eth-node:8545
            - http://my-eth-node2:8545
        cpu:
          type: string
          example: "1"
          default: "2"
          description: Number of CPU core required
        cpuLimit:
          type: string
          example: "2"
          default: "4"
          description: Max number of CPU cores
        memory:
          type: string
          example: "4Gi"
          default: "2Gi"
          description: Memory required
        memoryLimit:
          type: string
          example: "8Gi"
          default: "4Gi"
          description: Max memory
        storage:
          type: string
          example: "10Gi"
          default: "20Gi"
          description: Disk space required

    EthereumNode:
      description: Ethereum 1 Node
      type: object
      properties:
        name:
          type: string
          example: my-node
          description: Ethereum node name
        network:
          type: string
          example: rinkeby
          description: Ethereum network to join
        client:
          description: Ethereum 1 client
          type: string
          default: besu
          example: geth
          enum:
            - besu
            - geth
            - parity
            - nethermind
        logging:
          description: logging verbosity level
          type: string
          default: info
          example: debug
          enum:
            - all
            - debug
            - error
            - fatal
            - info
            - off
            - trace
            - warn
        nodePrivateKeySecretName:
          description: name of the kubernetes secret holding node private key
          type: string
          example: my-node-private-key
        p2pPort:
          description: p2p communication and discovery port
          type: integer
          default: 30303
          example: 4444
        syncMode:
          description: Blockchain synchronization mode
          type: string
          default: fast
          example: full
          enum:
            - fast
            - full
            - light
        staticNodes:
          description: trusted nodes to maintain connection to
          type: array
          items:
            description: Ethereum node URL
            type: string
        bootnodes:
          description: ethereum nodes that help bootstrap the network
          type: array
          items:
            description: Ethereum node URL
            type: string
        miner:
          description: Node is mining
          type: string
          default: false
          example: true
        coinbase:
          description: Miner ethereum address
          type: string
          example: "0x5dfA5dB515748f3E2BCc8677A9332f4aFFad5A5E"
        import:
          description: Ethereum account to import
          type: object
          properties:
            privateKeySecretName:
              type: string
              example: my-account-private-key
            passwordSecretName:
              type: string
              example: my-account-password
        rpc:
          description: Enable JSON-RPC HTTP server
          type: boolean
          default: false
          example: true
        rpcPort:
          description: JSON-RPC HTTP server port
          type: integer
          default: 8545
          example: 55555
        rpcAPI:
          description: JSON-RPC HTTP server modules to enable
          type: array
          default:
            - eth
            - net
            - web3
          example:
            - eth
          items:
            description: JSON-RPC module
            example: web3
            type: string
            enum:
              - admin
              - clique
              - debug
              - eea
              - eth
              - ibft
              - net
              - miner
              - perm
              - privacy
              - plugins
              - txpool
              - web3
        ws:
          description: Enable JSON-RPC web socket server
          type: boolean
          default: false
          example: true
        wsPort:
          description: JSON-RPC web socket server port
          type: integer
          default: 8546
          example: 8888
        wsAPI:
          description: JSON-RPC web socket server modules to enable
          type: array
          default:
            - eth
            - net
            - web3
          example:
            - eth
          items:
            description: JSON-RPC module
            example: web3
            type: string
            enum:
              - admin
              - clique
              - debug
              - eea
              - eth
              - ibft
              - net
              - miner
              - perm
              - privacy
              - plugins
              - txpool
              - web3
        graphql:
          description: Enable GraphQL server
          type: boolean
          default: false
          example: true
        graphqlPort:
          description: GraphQL server port
          type: integer
          default: 8547
          example: 666666
        hosts:
          description: Whitelisted hosts to accept api calls from
          type: array
          default:
            - "*"
          example:
            - my.domain.com
            - your.domain.com
          items:
            description: whitelisted domain
            type: string
        corsDomains:
          description: accept requests from pages loaded from these domains
          type: array
          default:
            - "*"
          example:
            - my.domain.com
            - your.domain.com
          items:
            description: cors domain
            type: string
        cpu:
          type: string
          example: "2"
          default: "1"
          description: Number of CPU core required
        cpuLimit:
          type: string
          example: "4"
          default: "2"
          description: Max number of CPU cores
        memory:
          type: string
          example: "4Gi"
          default: "2Gi"
          description: Memory required
        memoryLimit:
          type: string
          example: "8Gi"
          default: "4Gi"
          description: Max memory
        storage:
          type: string
          example: "200Gi"
          default: "10Gi"
          description: Disk space required

    CreateEthereumNode:
      description: Ethereum 1 Node
      type: object
      required:
        - name
        - network
        - client
      properties:
        name:
          type: string
          example: my-node
          description: Ethereum node name
        network:
          type: string
          example: rinkeby
          description: Ethereum network to join
        client:
          description: Ethereum 1 client
          type: string
          default: besu
          example: geth
          enum:
            - besu
            - geth
            - parity
            - nethermind
        nodePrivateKeySecretName:
          description: name of the kubernetes secret holding node private key
          type: string
          example: my-node-private-key

    UpdateEthereumNode:
      description: Mutable Ethereum 1 Node fields
      type: object
      properties:
        logging:
          description: logging verbosity level
          type: string
          default: info
          example: debug
          enum:
            - all
            - debug
            - error
            - fatal
            - info
            - off
            - trace
            - warn
        nodePrivateKeySecretName:
          description: name of the kubernetes secret holding node private key
          type: string
          example: my-node-private-key
        p2pPort:
          description: p2p communication and discovery port
          type: integer
          default: 30303
          example: 4444
        syncMode:
          description: Blockchain synchronization mode
          type: string
          default: fast
          example: full
          enum:
            - fast
            - full
            - light
        staticNodes:
          description: trusted nodes to maintain connection to
          type: array
          items:
            description: Ethereum node URL
            type: string
        bootnodes:
          description: ethereum nodes that help bootstrap the network
          type: array
          items:
            description: Ethereum node URL
            type: string
        miner:
          description: Node is mining
          type: string
          default: false
          example: true
        coinbase:
          description: Miner ethereum address
          type: string
          example: "0x5dfA5dB515748f3E2BCc8677A9332f4aFFad5A5E"
        import:
          description: Ethereum account to import
          type: object
          properties:
            privateKeySecretName:
              type: string
              example: my-account-private-key
            passwordSecretName:
              type: string
              example: my-account-password
        rpc:
          description: Enable JSON-RPC HTTP server
          type: boolean
          default: false
          example: true
        rpcPort:
          description: JSON-RPC HTTP server port
          type: integer
          default: 8545
          example: 55555
        rpcAPI:
          description: JSON-RPC HTTP server modules to enable
          type: array
          default:
            - eth
            - net
            - web3
          example:
            - eth
          items:
            description: JSON-RPC module
            example: web3
            type: string
            enum:
              - admin
              - clique
              - debug
              - eea
              - eth
              - ibft
              - net
              - miner
              - perm
              - privacy
              - plugins
              - txpool
              - web3
        ws:
          description: Enable JSON-RPC web socket server
          type: boolean
          default: false
          example: true
        wsPort:
          description: JSON-RPC web socket server port
          type: integer
          default: 8546
          example: 8888
        wsAPI:
          description: JSON-RPC web socket server modules to enable
          type: array
          default:
            - eth
            - net
            - web3
          example:
            - eth
          items:
            description: JSON-RPC module
            example: web3
            type: string
            enum:
              - admin
              - clique
              - debug
              - eea
              - eth
              - ibft
              - net
              - miner
              - perm
              - privacy
              - plugins
              - txpool
              - web3
        graphql:
          description: Enable GraphQL server
          type: boolean
          default: false
          example: true
        graphqlPort:
          description: GraphQL server port
          type: integer
          default: 8547
          example: 666666
        hosts:
          description: Whitelisted hosts to accept api calls from
          type: array
          default:
            - "*"
          example:
            - my.domain.com
            - your.domain.com
          items:
            description: whitelisted domain
            type: string
        corsDomains:
          description: accept requests from pages loaded from these domains
          type: array
          default:
            - "*"
          example:
            - my.domain.com
            - your.domain.com
          items:
            description: cors domain
            type: string
        cpu:
          type: string
          example: "2"
          default: "1"
          description: Number of CPU core required
        cpuLimit:
          type: string
          example: "4"
          default: "2"
          description: Max number of CPU cores
        memory:
          type: string
          example: "4Gi"
          default: "2Gi"
          description: Memory required
        memoryLimit:
          type: string
          example: "8Gi"
          default: "4Gi"
          description: Max memory
        storage:
          type: string
          example: "200Gi"
          default: "10Gi"
          description: Disk space required

    IPFSPeer:
      description: IPFS peer
      type: object
      properties:
        name:
          type: string
          example: my-peer
          description: IPFS peer name
        apiPort:
          type: number
          example: 3000
          default: 5001
          description: API server port
        apiHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: API server host
        gatewayPort:
          type: number
          example: 5000
          default: 8080
          description: local IPFS gateway server port
        gatewayHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: API server host
        routing:
          $ref: "#/components/schemas/IPFSRouting"
        profiles:
          type: array
          description: configuration profiles
          items:
            $ref: "#/components/schemas/IPFSConfigurationProfile"
        initProfiles:
          type: array
          description: inital configuration profiles
          default:
            - default-datastore
          items:
            $ref: "#/components/schemas/IPFSConfigurationProfile"
        cpu:
          type: string
          example: "2"
          default: "1"
          description: Number of CPU core required
        cpuLimit:
          type: string
          example: "4"
          default: "2"
          description: Max number of CPU cores
        memory:
          type: string
          example: "4Gi"
          default: "2Gi"
          description: Memory required
        memoryLimit:
          type: string
          example: "8Gi"
          default: "4Gi"
          description: Max memory
        storage:
          type: string
          example: "200Gi"
          default: "10Gi"
          description: Disk space required

    CreateIPFSPeer:
      description: IPFS peer
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: my-peer
          description: IPFS peer name
        initProfiles:
          type: array
          description: inital configuration profiles
          default:
            - default-datastore
          items:
            $ref: "#/components/schemas/IPFSConfigurationProfile"

    UpdateIPFSPeer:
      description: Mutable IPFS peer fields
      type: object
      properties:
        apiPort:
          type: number
          example: 3000
          default: 5001
          description: API server port
        apiHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: API server host
        gatewayPort:
          type: number
          example: 5000
          default: 8080
          description: local IPFS gateway server port
        gatewayHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: API server host
        routing:
          $ref: "#/components/schemas/IPFSRouting"
        profiles:
          type: array
          description: configuration profiles
          items:
            $ref: "#/components/schemas/IPFSConfigurationProfile"
        cpu:
          type: string
          example: "2"
          default: "1"
          description: Number of CPU core required
        cpuLimit:
          type: string
          example: "4"
          default: "2"
          description: Max number of CPU cores
        memory:
          type: string
          example: "4Gi"
          default: "2Gi"
          description: Memory required
        memoryLimit:
          type: string
          example: "8Gi"
          default: "4Gi"
          description: Max memory
        storage:
          type: string
          example: "200Gi"
          default: "10Gi"
          description: Disk space required

    IPFSRouting:
      type: string
      example: "dhtclient"
      default: "dht"
      description: Content routing mechanism
      enum:
        - none
        - dht
        - dhtclient
        - dhtserver

    IPFSConfigurationProfile:
      type: string
      description: IPFS configuration profile
      enum:
        - server
        - randomports
        - default-datastore
        - local-discovery
        - test
        - default-networking
        - flatfs
        - badgerds
        - lowpower

    IPFSClusterPeer:
      description: IPFS cluster peer
      type: object
      properties:
        name:
          type: string
          description: cluster peer name
          example: my-cluster-peer
        consensus:
          type: string
          description: cluster consensus algorithm
          example: raft
          default: crdt
          enum:
            - crdt
            - raft
        clusterSecretName:
          type: string
          description: k8s secret holding cluster secret
          example: my-cluster-secret
        peerEndpoint:
          type: string
          description: ipfs peer HTTP API endpoint
          example: /dns4/my-ipfs-peer/tcp/5001
        id:
          type: string
          description: cluster peer id
          example: 12D3KooWLGxJgETUVhkeXmmertpEJotW6tJ5r8zunPTGPYJr8vgY
        privatekeySecretName:
          type: string
          description: k8s secret name holding private key from which cluster peer id is derived
          example: my-cluster-peer-privatekey
        trustedPeers:
          type: array
          description: trusted peers that can change cluster pinset in CRDT-consensus clusters
          items:
            type: string
            description: cluster peer id
            example: 12D3KooWQ9yZnqowEDme3gSgS45KY9ZoEmAiGYRxusdEaqtFa9pr
        bootstrapPeers:
          type: array
          description: cluster peers to connect to at startup
          items:
            type: string
            description: cluster peer multiaddress
            example: /dns4/your-cluster-peer/tcp/9096/ipfs/QmcQ5XvrSQ4DouNkQyQtEoLczbMr6D9bSenGy6WQUCQUBt
        cpu:
          type: string
          example: "2"
          default: "1"
          description: Number of CPU core required
        cpuLimit:
          type: string
          example: "4"
          default: "2"
          description: Max number of CPU cores
        memory:
          type: string
          example: "4Gi"
          default: "2Gi"
          description: Memory required
        memoryLimit:
          type: string
          example: "8Gi"
          default: "4Gi"
          description: Max memory
        storage:
          type: string
          example: "200Gi"
          default: "10Gi"
          description: Disk space required

    CreateIPFSClusterPeer:
      description: IPFS cluster peer
      type: object
      required:
        - name
        - clusterSecretName
        - peerEndpoint
      properties:
        name:
          type: string
          description: cluster peer name
          example: my-cluster-peer
        consensus:
          type: string
          description: cluster consensus algorithm
          example: raft
          default: crdt
          enum:
            - crdt
            - raft
        clusterSecretName:
          type: string
          description: k8s secret holding cluster secret
          example: my-cluster-secret
        peerEndpoint:
          type: string
          description: ipfs peer HTTP API endpoint
          example: /dns4/my-ipfs-peer/tcp/5001
        id:
          type: string
          description: cluster peer id
          example: 12D3KooWLGxJgETUVhkeXmmertpEJotW6tJ5r8zunPTGPYJr8vgY
        privatekeySecretName:
          type: string
          description: k8s secret name holding private key from which cluster peer id is derived
          example: my-cluster-peer-privatekey
        trustedPeers:
          type: array
          description: trusted peers that can change cluster pinset in CRDT-consensus clusters
          items:
            type: string
            description: cluster peer id
            example: 12D3KooWQ9yZnqowEDme3gSgS45KY9ZoEmAiGYRxusdEaqtFa9pr
        bootstrapPeers:
          type: array
          description: cluster peers to connect to at startup
          items:
            type: string
            description: cluster peer multiaddress
            example: /dns4/your-cluster-peer/tcp/9096/ipfs/QmcQ5XvrSQ4DouNkQyQtEoLczbMr6D9bSenGy6WQUCQUBt

    UpdateIPFSClusterPeer:
      description: IPFS cluster peer
      type: object
      properties:
        peerEndpoint:
          type: string
          description: ipfs peer HTTP API endpoint
          example: /dns4/my-ipfs-peer/tcp/5001
        bootstrapPeers:
          type: array
          description: cluster peers to connect to at startup
          items:
            type: string
            description: cluster peer multiaddress
            example: /dns4/your-cluster-peer/tcp/9096/ipfs/QmcQ5XvrSQ4DouNkQyQtEoLczbMr6D9bSenGy6WQUCQUBt
        cpu:
          type: string
          example: "2"
          default: "1"
          description: Number of CPU core required
        cpuLimit:
          type: string
          example: "4"
          default: "2"
          description: Max number of CPU cores
        memory:
          type: string
          example: "4Gi"
          default: "2Gi"
          description: Memory required
        memoryLimit:
          type: string
          example: "8Gi"
          default: "4Gi"
          description: Max memory
        storage:
          type: string
          example: "200Gi"
          default: "10Gi"
          description: Disk space required

    FilecoinNode:
      description: Filecoin Node
      type: object
      properties:
        name:
          type: string
          example: my-node
          description: Filecoin node name
        network:
          type: string
          example: mainnet
          description: Filecoin network name
          enum:
            - mainnet
            - calibration
        api:
          type: boolean
          example: true
          default: false
          description: Enable API server
        apiPort:
          type: number
          example: 4321
          default: 1234
          description: API server port
        apiHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: API server host
        apiRequestTimeout:
          type: number
          example: 90
          default: 30
          description: API request timeout in seconds
        disableMetadataLog:
          type: boolean
          example: true
          default: false
          description: Disable metadata logs
        p2pPort:
          type: number
          example: 5555
          default: 4444
          description: p2p port
        p2pHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: p2p host
        ipfsForRetrieval:
          type: boolean
          default: false
          example: true
          description: Use ipfs for retrieval
        ipfsPeerEndpoint:
          type: string
          example: "/dns4/my-peer/tcp/5001"
          description: ipfs peer API endpoint
        ipfsOnlineMode:
          type: boolean
          default: false
          example: true
          description: ipfs online mode
        cpu:
          type: string
          example: "4"
          default: "8"
          description: Number of CPU core required
        cpuLimit:
          type: string
          example: "8"
          default: "16"
          description: Max number of CPU cores
        memory:
          type: string
          example: "8Gi"
          default: "16Gi"
          description: Memory required
        memoryLimit:
          type: string
          example: "16Gi"
          default: "32Gi"
          description: Max memory
        storage:
          type: string
          example: "200Gi"
          default: "10Gi"
          description: Disk space required

    CreateFilecoinNode:
      description: Filecoin Node
      type: object
      required:
        - name
        - network
      properties:
        name:
          type: string
          example: my-node
          description: Filecoin node name
        network:
          type: string
          example: mainnet
          description: Filecoin network name
          enum:
            - mainnet
            - calibration

    UpdateFilecoinNode:
      description: Filecoin Node mutable fields
      type: object
      properties:
        api:
          type: boolean
          example: true
          default: false
          description: Enable API server
        apiPort:
          type: number
          example: 4321
          default: 1234
          description: API server port
        apiHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: API server host
        apiRequestTimeout:
          type: number
          example: 90
          default: 30
          description: API request timeout in seconds
        disableMetadataLog:
          type: boolean
          example: true
          default: false
          description: Disable metadata logs
        p2pPort:
          type: number
          example: 5555
          default: 4444
          description: p2p port
        p2pHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: p2p host
        ipfsForRetrieval:
          type: boolean
          default: false
          example: true
          description: Use ipfs for retrieval
        ipfsPeerEndpoint:
          type: string
          example: "/dns4/my-peer/tcp/5001"
          description: ipfs peer API endpoint
        ipfsOnlineMode:
          type: boolean
          default: false
          example: true
          description: ipfs online mode
        cpu:
          type: string
          example: "4"
          default: "8"
          description: Number of CPU core required
        cpuLimit:
          type: string
          example: "8"
          default: "16"
          description: Max number of CPU cores
        memory:
          type: string
          example: "8Gi"
          default: "16Gi"
          description: Memory required
        memoryLimit:
          type: string
          example: "16Gi"
          default: "32Gi"
          description: Max memory
        storage:
          type: string
          example: "200Gi"
          default: "10Gi"
          description: Disk space required

    Ethereum2BeaconNode:
      description: Ethereum 2.0 beacon node
      type: object
      properties:
        name:
          type: string
          example: "my-beacon"
          description: Beacon node name
        network:
          type: string
          example: "mainnet"
          description: Beacon chain network name
        client:
          type: string
          example: "prysm"
          default: "teku"
          enum:
            - "teku"
            - "prysm"
            - "lighthouse"
            - "nimbus"
          description: Beacon node client
        eth1Endpoints:
          type: array
          description: Ethereum node JSON-RPC endpoints
          items:
            type: string
            description: Ethereum JSON-RPC endpoint
          example:
            - "my-ethereum-node:8545"
        rest:
          type: boolean
          example: true
          default: false
          description: Enable REST API server
        restPort:
          type: number
          example: 5555
          default: 5051
          description: REST API server port
        restHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: REST API server host
        rpc:
          type: boolean
          example: true
          default: false
          description: Enable JSON-RPC server
        rpcPort:
          type: number
          example: 4444
          default: 4000
          description: JSON-RPC server port
        rpcHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: JSON-RPC server host
        grpc:
          type: boolean
          example: true
          default: false
          description: Enable GRPC gateway server
        grpcPort:
          type: number
          example: 3555
          default: 3500
          description: GRPC gateway server port
        grpcHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: GRPC gateway server host
        cpu:
          type: string
          example: "2"
          default: "4"
          description: Number of CPU core required
        cpuLimit:
          type: string
          example: "4"
          default: "8"
          description: Max number of CPU cores
        memory:
          type: string
          example: "4Gi"
          default: "8Gi"
          description: Memory required
        memoryLimit:
          type: string
          example: "8Gi"
          default: "16Gi"
          description: Max memory
        storage:
          type: string
          example: "1Ti"
          default: "200Gi"
          description: Disk space required

    CreateEthereum2BeaconNode:
      description: Ethereum 2.0 beacon node
      type: object
      required:
        - name
        - network
        - client
      properties:
        name:
          type: string
          example: "my-beacon"
          description: Beacon node name
        network:
          type: string
          example: "mainnet"
          description: Beacon chain network name
        client:
          type: string
          example: "prysm"
          default: "teku"
          enum:
            - "teku"
            - "prysm"
            - "lighthouse"
            - "nimbus"
          description: Beacon node client
        eth1Endpoints:
          type: array
          description: Ethereum node JSON-RPC endpoints
          items:
            type: string
            description: Ethereum JSON-RPC endpoint
          example:
            - "my-ethereum-node:8545"

    UpdateEthereum2BeaconNode:
      description: Ethereum 2.0 beacon node
      type: object
      properties:
        eth1Endpoints:
          type: array
          description: Ethereum node JSON-RPC endpoints
          items:
            type: string
            description: Ethereum JSON-RPC endpoint
          example:
            - "my-ethereum-node:8545"
        rest:
          type: boolean
          example: true
          default: false
          description: Enable REST API server
        restPort:
          type: number
          example: 5555
          default: 5051
          description: REST API server port
        restHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: REST API server host
        rpc:
          type: boolean
          example: true
          default: false
          description: Enable JSON-RPC server
        rpcPort:
          type: number
          example: 4444
          default: 4000
          description: JSON-RPC server port
        rpcHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: JSON-RPC server host
        grpc:
          type: boolean
          example: true
          default: false
          description: Enable GRPC gateway server
        grpcPort:
          type: number
          example: 3555
          default: 3500
          description: GRPC gateway server port
        grpcHost:
          type: string
          example: "127.0.0.1"
          default: "0.0.0.0"
          description: GRPC gateway server host
        cpu:
          type: string
          example: "2"
          default: "4"
          description: Number of CPU core required
        cpuLimit:
          type: string
          example: "4"
          default: "8"
          description: Max number of CPU cores
        memory:
          type: string
          example: "4Gi"
          default: "8Gi"
          description: Memory required
        memoryLimit:
          type: string
          example: "8Gi"
          default: "16Gi"
          description: Max memory
        storage:
          type: string
          example: "1Ti"
          default: "200Gi"
          description: Disk space required

    Ethereum2Keystore:
      description: Ethereum 2.0 validator keystore
      type: object
      required:
        - secretName
      properties:
        secretName:
          type: string

    Ethereum2Validator:
      description: Ethereum 2.0 validator
      type: object
      properties:
        name:
          type: string
          example: "my-validator"
          description: Validator name
        network:
          type: string
          example: "mainnet"
          description: Beacon chain network name
        client:
          type: string
          example: "prysm"
          default: "teku"
          enum:
            - "teku"
            - "prysm"
            - "lighthouse"
            - "nimbus"
          description: Validator client
        graffiti:
          type: string
          description: Text to include in proposed blocks
          default: Powered by Kotal
        keystores:
          type: array
          items:
            $ref: "#/components/schemas/Ethereum2Keystore"
        walletPasswordSecretName:
          description: prysm client wallet password
          type: string
        beaconEndpoints:
          type: array
          description: Beacon node endpoints
          items:
            type: string
            description: Beacon node endpoint
          example:
            - "beacon-node:8545"
        cpu:
          type: string
          example: "2"
          default: "4"
          description: Number of CPU core required
        cpuLimit:
          type: string
          example: "4"
          default: "8"
          description: Max number of CPU cores
        memory:
          type: string
          example: "4Gi"
          default: "8Gi"
          description: Memory required
        memoryLimit:
          type: string
          example: "8Gi"
          default: "16Gi"
          description: Max memory
        storage:
          type: string
          example: "1Ti"
          default: "200Gi"
          description: Disk space required

    CreateEthereum2Validator:
      description: Ethereum 2.0 validator
      type: object
      required:
        - name
        - network
        - client
        - beaconEndpoints
        - keystores
        - walletPasswordSecretName
      properties:
        name:
          type: string
          example: "my-validator"
          description: Validator name
        network:
          type: string
          example: "mainnet"
          description: Beacon chain network name
        client:
          type: string
          example: "prysm"
          default: "teku"
          enum:
            - "teku"
            - "prysm"
            - "lighthouse"
            - "nimbus"
          description: Validator client
        keystores:
          type: array
          items:
            $ref: "#/components/schemas/Ethereum2Keystore"
        walletPasswordSecretName:
          description: prysm client wallet password
          type: string
        beaconEndpoints:
          type: array
          description: Beacon node endpoints
          items:
            type: string
            description: Beacon node endpoint
          example:
            - "beacon-node:8545"

    UpdateEthereum2Validator:
      description: Mutable Ethereum 2.0 validator fields
      type: object
      properties:
        graffiti:
          type: string
          description: Text to include in proposed blocks
          default: Powered by Kotal
        keystores:
          type: array
          items:
            $ref: "#/components/schemas/Ethereum2Keystore"
        walletPasswordSecretName:
          description: prysm client wallet password
          type: string
        beaconEndpoints:
          type: array
          description: Beacon node endpoints
          items:
            type: string
            description: Beacon node endpoint
          example:
            - "beacon-node:8545"
        cpu:
          type: string
          example: "2"
          default: "4"
          description: Number of CPU core required
        cpuLimit:
          type: string
          example: "4"
          default: "8"
          description: Max number of CPU cores
        memory:
          type: string
          example: "4Gi"
          default: "8Gi"
          description: Memory required
        memoryLimit:
          type: string
          example: "8Gi"
          default: "16Gi"
          description: Max memory
        storage:
          type: string
          example: "1Ti"
          default: "200Gi"
          description: Disk space required

    CreateKubernetesSecret:
      description: Create Kubernetes Secret
      type: object
      properties:
        name:
          type: string
          example: "my-secret"
          description: secret name
        type:
          type: string
          example: keystore
          description: secret type
          enum:
            - keystore
            - password
            - privatekey
            - generic
        data:
          type: object
          description: secret data

    KubernetesSecret:
      description: Kubernetes Secret
      type: object
      properties:
        name:
          type: string
          example: "my-secret"
          description: secret name
        type:
          type: string
          example: keystore
          description: secret type
          enum:
            - keystore
            - password
            - privatekey
            - generic

    PolkadotNode:
      description: Polkadot node
      type: object
      properties:
        name:
          type: string
          example: my-node
          description: Polkadot node name
        network:
          type: string
          example: kusama
          enum:
            - polkadot
            - kusama
            - rococo
            - westend
          description: Polkadot chain name
        p2pPort:
          type: number
          example: 40444
          default: 30333
          description: p2p protocol tcp port
        nodePrivateKeySecretName:
          type: string
          example: "my-node-key"
          description: Secret name holding node Ed25519 private key
        validator:
          type: boolean
          example: true
          default: false
          description: Enables validator mode
        syncMode:
          type: string
          enum:
            - fast
            - full
          example: full
          default: fast
          description: Blockchain synchronization mode
        pruning:
          type: boolean
          example: true
          description: Keep recent or all blocks
        retainedBlocks:
          type: number
          example: 1024
          default: 256
          description: Number of blocks to keep state for
        logging:
          type: string
          example: warn
          default: info
          enum:
            - error
            - warn
            - info
            - debug
            - trace
          description: Logging verboisty level
        telemetry:
          type: boolean
          example: true
          default: false
          description: Enables connecting to telemetry server
        telemetryURL:
          type: string
          example: "wss://telemetry.kotal.io/submit/ 0"
          default: "wss://telemetry.polkadot.io/submit/ 0"
          description: Telemetry service URL
        prometheus:
          type: boolean
          example: true
          default: false
          description: Exposes a prometheus exporter endpoint
        prometheusPort:
          type: number
          example: 9616
          default: 9615
          description: Prometheus exporter port
        rpc:
          type: boolean
          example: true
          default: false
          description: Enables JSON-RPC server
        rpcPort:
          type: number
          example: 9922
          default: 9933
          description: JSON-RPC server port
        ws:
          type: boolean
          example: true
          default: false
          description: Enables WebSocket server
        wsPort:
          type: number
          example: 9955
          default: 9944
          description: WebSocket server port
        corsDomains:
          type: array
          default:
            - "*"
          example:
            - kotal.co
            - kotal.network
          description: Origins allowed to access the JSON-RPC HTTP and WS servers
        cpu:
          type: string
          example: "2"
          default: "4"
          description: Number of CPU core required
        cpuLimit:
          type: string
          example: "4"
          default: "8"
          description: Max number of CPU cores
        memory:
          type: string
          example: "4Gi"
          default: "4Gi"
          description: Memory required
        memoryLimit:
          type: string
          example: "8Gi"
          default: "8Gi"
          description: Max memory
        storage:
          type: string
          example: "200Gi"
          default: "80Gi"
          description: Disk space required

    CreatePolkadotNode:
      description: Polkadot node
      type: object
      required:
        - name
        - network
      properties:
        name:
          type: string
          example: my-node
          description: Polkadot node name
        network:
          type: string
          example: kusama
          enum:
            - polkadot
            - kusama
            - rococo
            - westend
          description: Polkadot chain name

    UpdatePolkadotNode:
      description: Polkadot node
      type: object
      properties:
        p2pPort:
          type: number
          example: 40444
          default: 30333
          description: p2p protocol tcp port
        nodePrivateKeySecretName:
          type: string
          example: "my-node-key"
          description: Secret name holding node Ed25519 private key
        validator:
          type: boolean
          example: true
          default: false
          description: Enables validator mode
        syncMode:
          type: string
          enum:
            - fast
            - full
          example: full
          default: fast
          description: Blockchain synchronization mode
        pruning:
          type: boolean
          example: true
          description: Keep recent or all blocks
        retainedBlocks:
          type: number
          example: 1024
          default: 256
          description: Number of blocks to keep state for
        logging:
          type: string
          example: warn
          default: info
          enum:
            - error
            - warn
            - info
            - debug
            - trace
          description: Logging verboisty level
        telemetry:
          type: boolean
          example: true
          default: false
          description: Enables connecting to telemetry server
        telemetryURL:
          type: string
          example: "wss://telemetry.kotal.io/submit/ 0"
          default: "wss://telemetry.polkadot.io/submit/ 0"
          description: Telemetry service URL
        prometheus:
          type: boolean
          example: true
          default: false
          description: Exposes a prometheus exporter endpoint
        prometheusPort:
          type: number
          example: 9616
          default: 9615
          description: Prometheus exporter port
        rpc:
          type: boolean
          example: true
          default: false
          description: Enables JSON-RPC server
        rpcPort:
          type: number
          example: 9922
          default: 9933
          description: JSON-RPC server port
        ws:
          type: boolean
          example: true
          default: false
          description: Enables WebSocket server
        wsPort:
          type: number
          example: 9955
          default: 9944
          description: WebSocket server port
        corsDomains:
          type: array
          default:
            - "*"
          example:
            - kotal.co
            - kotal.network
          description: Origins allowed to access the JSON-RPC HTTP and WS servers
        cpu:
          type: string
          example: "2"
          default: "4"
          description: Number of CPU core required
        cpuLimit:
          type: string
          example: "4"
          default: "8"
          description: Max number of CPU cores
        memory:
          type: string
          example: "4Gi"
          default: "4Gi"
          description: Memory required
        memoryLimit:
          type: string
          example: "8Gi"
          default: "8Gi"
          description: Max memory
        storage:
          type: string
          example: "200Gi"
          default: "80Gi"
          description: Disk space required
